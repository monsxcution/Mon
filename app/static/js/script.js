/**
 * STool Dashboard - Global JavaScript Functions
 * File n√†y ch·ª©a c√°c functions d√πng chung cho to√†n b·ªô ·ª©ng d·ª•ng
 */

// ===== TOAST NOTIFICATION FUNCTION =====
/**
 * Hi·ªÉn th·ªã toast notification (Bootstrap Toast)
 * @param {string} message - N·ªôi dung th√¥ng b√°o
 * @param {string} type - Lo·∫°i th√¥ng b√°o ('success', 'error', 'info')
 * @param {string} title - Ti√™u ƒë·ªÅ t√πy ch·ªânh (optional)
 */
function showToast(message, type = 'success', title = 'Th√¥ng b√°o') {
    const toastEl = document.getElementById('liveToast');
    const toastHeader = document.getElementById('toastHeader');
    const toastTitle = document.getElementById('toastTitle');
    const toastBody = document.getElementById('toastBody');
    
    if (!toastEl) {
        console.warn('Toast element not found!');
        return;
    }
    
    // Set message
    toastBody.textContent = message;
    
    // Reset header classes
    toastHeader.className = 'toast-header';
    
    // Apply styling based on type
    if (type === 'success') {
        toastHeader.classList.add('bg-success', 'text-white');
        toastTitle.textContent = '‚úÖ Th√†nh c√¥ng';
    } else if (type === 'error') {
        toastHeader.classList.add('bg-danger', 'text-white');
        toastTitle.textContent = '‚ùå L·ªói';
    } else if (type === 'warning') {
        toastHeader.classList.add('bg-warning', 'text-dark');
        toastTitle.textContent = '‚ö†Ô∏è C·∫£nh b√°o';
    } else {
        toastHeader.classList.add('bg-info', 'text-white');
        toastTitle.textContent = title;
    }
    
    // Show toast
    const toast = new bootstrap.Toast(toastEl);
    toast.show();
}

// ===== GLOBAL HELPERS =====
// B·∫°n c√≥ th·ªÉ th√™m c√°c helper functions kh√°c v√†o ƒë√¢y
// V√≠ d·ª•: formatDate, formatNumber, debounce, throttle, etc.


// ===== MODAL KEYBOARD SHORTCUTS =====
/**
 * X·ª≠ l√Ω ph√≠m Enter v√† Esc cho t·∫•t c·∫£ modal
 * - Enter: K√≠ch ho·∫°t n√∫t primary/danger trong modal
 * - Esc: ƒê√≥ng modal (Bootstrap t·ª± x·ª≠ l√Ω, nh∆∞ng c√≥ th·ªÉ custom)
 */
document.addEventListener('DOMContentLoaded', function() {
    // L·∫Øng nghe s·ª± ki·ªán khi modal ƒë∆∞·ª£c hi·ªÉn th·ªã
    document.addEventListener('shown.bs.modal', function(event) {
        const modal = event.target;
        
        // T√¨m n√∫t primary ho·∫∑c danger trong modal (∆∞u ti√™n danger cho modal x√≥a)
        const dangerBtn = modal.querySelector('.modal-footer .btn-danger');
        const primaryBtn = modal.querySelector('.modal-footer .btn-primary');
        const actionBtn = dangerBtn || primaryBtn;
        
        // Handler cho ph√≠m Enter
        const enterHandler = function(e) {
            if (e.key === 'Enter' && !e.shiftKey && !e.ctrlKey && !e.altKey) {
                // Kh√¥ng √°p d·ª•ng n·∫øu ƒëang focus v√†o textarea
                if (document.activeElement.tagName === 'TEXTAREA') {
                    return;
                }
                
                e.preventDefault();
                if (actionBtn && !actionBtn.disabled) {
                    actionBtn.click();
                }
            }
        };
        
        // Th√™m event listener
        modal.addEventListener('keydown', enterHandler);
        
        // Cleanup khi modal b·ªã ƒë√≥ng
        modal.addEventListener('hidden.bs.modal', function() {
            modal.removeEventListener('keydown', enterHandler);
        }, { once: true });
    });
});

/* === Smart Token Feature === */

/**
 * üìã H√†m copy text v√†o clipboard
 * @param {string} textToCopy - ƒêo·∫°n text c·∫ßn copy
 */
async function copyToClipboard(textToCopy) {
    try {
        await navigator.clipboard.writeText(textToCopy);
        
        // (Optional) T·∫°o th√¥ng b√°o "ƒê√£ copy"
        const tempDiv = document.createElement('div');
        tempDiv.textContent = `ƒê√£ copy: ${textToCopy}`;
        tempDiv.style.cssText = `
            position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7); color: white; padding: 8px 15px;
            border-radius: 5px; font-size: 14px; z-index: 1000;
            transition: opacity 0.5s ease-out;
        `;
        document.body.appendChild(tempDiv);
        setTimeout(() => {
            tempDiv.style.opacity = '0';
            setTimeout(() => tempDiv.remove(), 500);
        }, 1500);

    } catch (err) {
        console.error('Kh√¥ng th·ªÉ copy:', err);
    }
}

/**
 * üöÄ H√†m ch√≠nh ƒë·ªÉ t√¨m v√† thay th·∫ø c√°c token
 * @param {HTMLElement} container - Ph·∫ßn t·ª≠ HTML (v√≠ d·ª•: div) ch·ª©a n·ªôi dung c·∫ßn x·ª≠ l√Ω
 */
function processSmartTokens(container) {
    if (!container) return;

    // ƒê·ªãnh nghƒ©a Regular Expressions
    const mentionRegex = /(^|\s|[\.,;!?()])(@[a-zA-Z0-9_]{3,32})(?![a-zA-Z0-9_])/g;
    const numberRegex = /(?<![a-zA-Z0-9])(\d{4,})(?![a-zA-Z0-9])/g; // >= 4 ch·ªØ s·ªë

    // D√πng TreeWalker ƒë·ªÉ ch·ªâ duy·ªát qua c√°c Text Node (hi·ªáu qu·∫£ nh·∫•t)
    const walker = document.createTreeWalker(
        container,
        NodeFilter.SHOW_TEXT,
        {
            acceptNode: function(node) {
                // B·ªè qua c√°c node ƒë√£ x·ª≠ l√Ω ho·∫∑c trong script/style
                if (node.parentElement.closest('script, style, .smart-token')) {
                    return NodeFilter.FILTER_REJECT;
                }
                // Ch·ªâ x·ª≠ l√Ω node c√≥ k√Ω t·ª± @ ho·∫∑c s·ªë (t·ªëi ∆∞u)
                if (node.nodeValue.includes('@') || /\d{4,}/.test(node.nodeValue)) {
                    return NodeFilter.FILTER_ACCEPT;
                }
                return NodeFilter.FILTER_REJECT;
            }
        }
    );

    const nodesToProcess = [];
    while (walker.nextNode()) {
        nodesToProcess.push(walker.currentNode);
    }

    // X·ª≠ l√Ω c√°c node (ph·∫£i l√†m sau khi duy·ªát xong ƒë·ªÉ tr√°nh l·ªói)
    nodesToProcess.forEach(textNode => {
        const parent = textNode.parentNode;
        const text = textNode.nodeValue;
        const fragment = document.createDocumentFragment();
        let lastIndex = 0;

        // T·∫°o m·∫£ng ch·ª©a t·∫•t c·∫£ c√°c v·ªã tr√≠ kh·ªõp (@ v√† s·ªë)
        const matches = [];
        let match;

        // T√¨m @username
        while ((match = mentionRegex.exec(text)) !== null) {
            const startIndex = match.index + match[1].length;
            matches.push({
                start: startIndex,
                end: startIndex + match[2].length,
                text: match[2]
            });
        }
        mentionRegex.lastIndex = 0; // Reset

        // T√¨m s·ªë
        while ((match = numberRegex.exec(text)) !== null) {
            matches.push({
                start: match.index,
                end: match.index + match[1].length,
                text: match[1]
            });
        }
        numberRegex.lastIndex = 0; // Reset

        // S·∫Øp x·∫øp c√°c match theo v·ªã tr√≠ b·∫Øt ƒë·∫ßu
        matches.sort((a, b) => a.start - b.start);

        // B·ªçc c√°c match b·∫±ng <span>
        matches.forEach(m => {
            if (m.start > lastIndex) {
                fragment.appendChild(document.createTextNode(text.substring(lastIndex, m.start)));
            }
            const span = document.createElement('span');
            span.className = 'smart-token';
            span.textContent = m.text;
            span.dataset.copyValue = m.text; // L∆∞u gi√° tr·ªã v√†o data- attribute
            fragment.appendChild(span);
            lastIndex = m.end;
        });

        // Th√™m ph·∫ßn text c√≤n l·∫°i
        if (lastIndex < text.length) {
            fragment.appendChild(document.createTextNode(text.substring(lastIndex)));
        }

        // Thay th·∫ø text node c≈© b·∫±ng fragment m·ªõi
        if (fragment.childNodes.length > 0) {
            parent.replaceChild(fragment, textNode);
        }
    });
}

/* === K·∫øt th√∫c Smart Token Feature === */

/* === K√≠ch ho·∫°t Smart Token === */

document.addEventListener('DOMContentLoaded', () => {

    // 1. X√°c ƒë·ªãnh v√πng ch·ª©a n·ªôi dung cho Notes
    const notesContainer = document.getElementById('notes-container');
    const notesDetailWrapper = document.getElementById('notes-detail-content-wrapper');
    
    // 2. X√°c ƒë·ªãnh v√πng ch·ª©a n·ªôi dung cho MXH
    const mxhContainer = document.getElementById('mxh-accounts-container');

    // 3. Ch·∫°y h√†m x·ª≠ l√Ω cho c√°c container - CH·ªà √ÅP D·ª§NG CHO TRANG NOTES
    const isNotesPage = window.location.pathname.includes('/notes') || 
                       document.querySelector('#notes-container') !== null;
    
    if (isNotesPage) {
        if (notesContainer) {
            processSmartTokens(notesContainer);
        }
        
        if (notesDetailWrapper) {
            processSmartTokens(notesDetailWrapper);
        }
    }
    
    // Ch·ª©c nƒÉng smart tokens KH√îNG √°p d·ª•ng cho MXH
    // if (mxhContainer) {
    //     processSmartTokens(mxhContainer);
    // }

    // 4. Th√™m tr√¨nh nghe s·ª± ki·ªán Click (d√πng event delegation)
    document.addEventListener('click', (event) => {
        const target = event.target;
        
        // Ki·ªÉm tra xem c√≥ click ƒë√∫ng v√†o .smart-token kh√¥ng
        if (target.classList.contains('smart-token') && target.dataset.copyValue) {
            event.preventDefault();
            copyToClipboard(target.dataset.copyValue);
        }
    });
    
    // 5. Observer ƒë·ªÉ x·ª≠ l√Ω n·ªôi dung ƒë·ªông (AJAX load)
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        // CH·ªà x·ª≠ l√Ω smart token cho n·ªôi dung m·ªõi trong trang Notes
                        const isNotesPage = window.location.pathname.includes('/notes') || 
                                           document.querySelector('#notes-container') !== null;
                        if (isNotesPage) {
                            processSmartTokens(node);
                        }
                    }
                });
            }
        });
    });

    // Quan s√°t c√°c thay ƒë·ªïi trong c√°c container ch√≠nh
    if (notesContainer) {
        observer.observe(notesContainer, { childList: true, subtree: true });
    }
    
    if (notesDetailWrapper) {
        observer.observe(notesDetailWrapper, { childList: true, subtree: true });
    }
    
    // KH√îNG observe MXH container ƒë·ªÉ tr√°nh √°p d·ª•ng smart tokens cho MXH
    // if (mxhContainer) {
    //     observer.observe(mxhContainer, { childList: true, subtree: true });
    // }
});

